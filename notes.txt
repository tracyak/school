Abstract Data Types

- work with pointers

Stacks; LIFO
- only 1 entry and exit point (at the top of the stack)
- can push, pop, peek items in a stack
- two pointers, basePointer (to start of the stack) and topPointer (to the top most item of the stack)
- when pop, check if there are any items in the stack
- when push, check if stack is full or not
- expectations:
	- initialise a stack using array
	
	stackArr = [None for _ in range(10)]
	basePointer = 0
	topPointer = -1 #because there are no items on the stack yet
	stackful = len(myArr) - 1

Queue; FIFO
- two types of queue, linear and circular
- 1 entry point (at the end of the queue), 1 exit point (at the start of the queue)
- keep track of length of queue to ensure we cannot dequeue an empty stack
- for linear queue, shift all elements to occupy the new free space but this is too expensive and time-consuming
- hence, we use circular queue, where rear pointer resets to 0 when it goes out of bound but size is not full when enqueueing a new element
- also where front pointer resets to 0 when it goes out of bound but size is not empty when dequeueing an element

Linked List; data and its pointers
- when adding an element, it is added to the start of the list
- when 

Trees; nodes with 3 pointers
- rootPointer points to the top of the tree(first element added)
- each node can have 2 child nodes, left child and right child (this is called a subtree)
- can be represented by a 2D array

Big O notation:
- O(1) Constant
	- The algorithm requires the same number of instructions to be executed, regardless of the size of the input data.
- O(n) Linear
	- The time taken for algorithm to be carried out varies proportionally to the size of the input data.
	- Implementing linear time involves the use of iteration(a single count-controlled loop)
	- e.g. linear search
	- Only the n value is considered for the complexity
- O(n^2) Quadratic(Polynomial)
	- The time taken for algorithm to be carried out is proportional to the square(or highest power) of the size of the input data.
	- Implementing polynomial involves use of multiple iterations
	- e.g bubble sort, insertion sort
	- Only the n value with the highest power is consider for the complexity
- O(2^n) Exponential
	- The time taken for algorithm to be executed is doubled every time size of data input is increased by 1.
	- Very inefficient
- O(log n) Logarithmic
	- The time taken for algorithm to be executed becomes very small as the size of data input increases.
	- Most efficient 
	- e.g. binary search
- Best, Average, and Worst case scenarios
- Recursive functios: functions that calls itself during execution

Further Programming:
- Programming paradigm: set of progamming concepts
- 4 types of paradigm:
	- low-level
	- imperative
	- object-oriented
	- declarative
(1) low-level:
	- when program needs to have direct access to hardware/specific memory locations
(2) imperative:
	- makes use of procedures and functions, lova and global variables
	- fewer instructions and less data storage
	- run faster compared to object-oriented than declarative
	- not suitable for large projects
(3) object-oriented:
	- encapsulation: to combine a properties of an object and all the possible actions into one program
	- you can define attributes and its methods in a class itself
	- everytime you call a method on a object, even if it doesn't have any parameters, it is always called with 1 argument (self)
	- instanciating: to create instances of an object
	- whenever we create an object of a class, we must include one method called the constructor
	- Defining classes using class diagrams
	Class Diagrams:
		- Contents:
			- Meaningful name
			- Properties/Attributes (name, data type + description) 
			- Methods, including Constructor (name + parameters and its purpose)
		- Properties of objects are called 'object variables', it is defined in the constructor
		- Shared properties of objects in a class are called 'class variables', it is defined outside the constructor
	Public & Private variables:
		- For security reasons, variables can be hidden/made private
		- Pseudocode: add 'private'(?), Python: add double underscores before the variable name
		- Accessors/Getters are special methods that allow user to access the private variables
		- Setters/Mutators are special methods that allow user to change the private variables
			- These above methods are used anywhere outside of a class, whether in main program or in its sub-class.

	Relationships between Classes:
	- Inheritance
		Teacher IS A Person
		Student IS A Person
		- 'IS A' is used to define hereditary relationships between classes
		- What do we call classes that are related to one another? Parent-Child classes, Super-Sub classes
		- Sub classes inherit all properties of its Super class/es along with its own unique properties and methods.
		- Polymorphism: Sub classes can also re-define methods that are inherited from its Super class.
	- Containment/Aggregation
		Building HAS A Room, but Room cannot exist without  Building (Composition)
		Library HAS A Book, but Book can exist without Library (Containment/Aggregation)
	
		

		
